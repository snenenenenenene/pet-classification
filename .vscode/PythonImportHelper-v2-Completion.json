[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras",
        "importPath": "tensorflow",
        "description": "tensorflow",
        "isExtraImport": true,
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "def_function",
        "importPath": "tensorflow.python.eager",
        "description": "tensorflow.python.eager",
        "isExtraImport": true,
        "detail": "tensorflow.python.eager",
        "documentation": {}
    },
    {
        "label": "def_function",
        "importPath": "tensorflow.python.eager",
        "description": "tensorflow.python.eager",
        "isExtraImport": true,
        "detail": "tensorflow.python.eager",
        "documentation": {}
    },
    {
        "label": "constant_op",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "dtypes",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "constant_op",
        "importPath": "tensorflow.python.framework",
        "description": "tensorflow.python.framework",
        "isExtraImport": true,
        "detail": "tensorflow.python.framework",
        "documentation": {}
    },
    {
        "label": "variables",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "variables",
        "importPath": "tensorflow.python.ops",
        "description": "tensorflow.python.ops",
        "isExtraImport": true,
        "detail": "tensorflow.python.ops",
        "documentation": {}
    },
    {
        "label": "tracking",
        "importPath": "tensorflow.python.training.tracking",
        "description": "tensorflow.python.training.tracking",
        "isExtraImport": true,
        "detail": "tensorflow.python.training.tracking",
        "documentation": {}
    },
    {
        "label": "tracking",
        "importPath": "tensorflow.python.training.tracking",
        "description": "tensorflow.python.training.tracking",
        "isExtraImport": true,
        "detail": "tensorflow.python.training.tracking",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "tensorflow.python.saved_model.save",
        "description": "tensorflow.python.saved_model.save",
        "isExtraImport": true,
        "detail": "tensorflow.python.saved_model.save",
        "documentation": {}
    },
    {
        "label": "save",
        "importPath": "tensorflow.python.saved_model.save",
        "description": "tensorflow.python.saved_model.save",
        "isExtraImport": true,
        "detail": "tensorflow.python.saved_model.save",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "to_categorical",
        "importPath": "tensorflow.keras.utils",
        "description": "tensorflow.keras.utils",
        "isExtraImport": true,
        "detail": "tensorflow.keras.utils",
        "documentation": {}
    },
    {
        "label": "load_img",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "img_to_array",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "load_img",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "img_to_array",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "tensorflow.python.keras.preprocessing.image",
        "description": "tensorflow.python.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.python.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "log_loss",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "tensorflowjs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflowjs",
        "description": "tensorflowjs",
        "detail": "tensorflowjs",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "input_data = constant_op.constant(1, shape=[2], dtype=tf.int64)\nroot = tracking.AutoTrackable()\nroot.v1 = variables.Variable(3, dtype=tf.int64)\nroot.v2 = variables.Variable(2, dtype=tf.int64)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * x)\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "root = tracking.AutoTrackable()\nroot.v1 = variables.Variable(3, dtype=tf.int64)\nroot.v2 = variables.Variable(2, dtype=tf.int64)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * x)\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "root.v1",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "root.v1 = variables.Variable(3, dtype=tf.int64)\nroot.v2 = variables.Variable(2, dtype=tf.int64)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * x)\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "root.v2",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "root.v2 = variables.Variable(2, dtype=tf.int64)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * x)\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "root.f",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "root.f = def_function.function(lambda x: root.v1 * root.v2 * x)\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "to_save",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "to_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "save_dir",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "peekOfCode": "save_dir = os.path.join('..', 'test_objects', 'saved_model', 'int64_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.int64_model",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "input_data = constant_op.constant(1, shape=[1], dtype=tf.uint8)\nroot = tracking.AutoTrackable()\nroot.v1 = variables.Variable(3)\nroot.v2 = variables.Variable(2)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * tf.cast(x, tf.int32))\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "root = tracking.AutoTrackable()\nroot.v1 = variables.Variable(3)\nroot.v2 = variables.Variable(2)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * tf.cast(x, tf.int32))\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "root.v1",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "root.v1 = variables.Variable(3)\nroot.v2 = variables.Variable(2)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * tf.cast(x, tf.int32))\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "root.v2",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "root.v2 = variables.Variable(2)\nroot.f = def_function.function(lambda x: root.v1 * root.v2 * tf.cast(x, tf.int32))\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "root.f",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "root.f = def_function.function(lambda x: root.v1 * root.v2 * tf.cast(x, tf.int32))\nto_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "to_save",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "to_save = root.f.get_concrete_function(input_data)\nsave_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "save_dir",
        "kind": 5,
        "importPath": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "description": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "peekOfCode": "save_dir = os.path.join('..', 'test_objects', 'saved_model', 'uint8_multiply')\nsave(root, save_dir, to_save)",
        "detail": "server.node_modules.@tensorflow.tfjs-node.python.unint8_model",
        "documentation": {}
    },
    {
        "label": "mapper",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mapper(value):\n    return reverse_mapping[value]\nprediction=model.predict(prediction_image)\nvalue=np.argmax(prediction)\nmove_name=mapper(value)\nprint(\"Prediction is {}.\".format(move_name))\nprint(test.shape)\nprediction2=model.predict(test)\nprint(prediction2.shape)\npred2=[]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TRAIN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "TRAIN = 'breeds/TRAIN'\nTEST = 'breeds/TEST'\ndataset, name=[]\ncount=0\npet_dict=[]\nfor file in os.listdir(TRAIN):\n    pet_dict+=[file]\nmapping={ 'basset_hound':0, 'beagle':1, 'russian_blue':2, 'pomeranian':3, 'ragdoll':4, \n         'staffordshire_bull_terrier':5, 'keeshond':6, 'siamese':7, 'pug':8, 'shiba_inu':9, \n         'american_pit_bull_terrier':10, 'bengal':11, 'british_shorthair':12, 'newfoundland':13, ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TEST",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "TEST = 'breeds/TEST'\ndataset, name=[]\ncount=0\npet_dict=[]\nfor file in os.listdir(TRAIN):\n    pet_dict+=[file]\nmapping={ 'basset_hound':0, 'beagle':1, 'russian_blue':2, 'pomeranian':3, 'ragdoll':4, \n         'staffordshire_bull_terrier':5, 'keeshond':6, 'siamese':7, 'pug':8, 'shiba_inu':9, \n         'american_pit_bull_terrier':10, 'bengal':11, 'british_shorthair':12, 'newfoundland':13, \n         'havanese':14, 'japanese_chin':15, 'german_shorthaired':16, 'birman':17, 'maine_coon':18, ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "datagen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "datagen = ImageDataGenerator(horizontal_flip=True,vertical_flip=True,rotation_range=20,zoom_range=0.2,\n                        width_shift_range=0.2,height_shift_range=0.2,shear_range=0.1,fill_mode=\"nearest\")\npretrained_model3 = tf.keras.applications.DenseNet121(input_shape=(180,180,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model3.trainable = False\ninputs3 = pretrained_model3.input\nx3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pretrained_model3",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pretrained_model3 = tf.keras.applications.DenseNet121(input_shape=(180,180,3),include_top=False,weights='imagenet',pooling='avg')\npretrained_model3.trainable = False\ninputs3 = pretrained_model3.input\nx3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pretrained_model3.trainable",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pretrained_model3.trainable = False\ninputs3 = pretrained_model3.input\nx3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "inputs3",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "inputs3 = pretrained_model3.input\nx3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "x3 = tf.keras.layers.Dense(128, activation='relu')(pretrained_model3.output)\noutputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))\nget_acc = his.history['accuracy']",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "outputs3",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "outputs3 = tf.keras.layers.Dense(37, activation='softmax')(x3)\nmodel = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))\nget_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model = tf.keras.Model(inputs=inputs3, outputs=outputs3)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhis=model.fit(datagen.flow(trainx,trainy,batch_size=32),validation_data=(testx,testy),epochs=30)\ny_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))\nget_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))\nget_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_acc",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "get_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "value_acc",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "value_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_loss",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "get_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()\nepochs = range(len(get_loss))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "validation_loss",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "validation_loss = his.history['val_loss']\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()\nepochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "epochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()\nepochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')\nplt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "epochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')\nplt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')\nplt.title('Training vs validation loss')\nplt.legend(loc=0)\nplt.figure()\nplt.show()\nload_img(\"breeds/TEST/1006.jpg\",target_size=(180,180))\nimage=load_img(\"breeds/TEST/1006.jpg\",target_size=(180,180))\nimage=img_to_array(image) ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mapper",
        "kind": 2,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "def mapper(value):\n    return reverse_mapping[value]\n# PREDICTION\n#Use prediction to get best match stored in value var\nprediction=model.predict(prediction_image)\nvalue=np.argmax(prediction)\nmove_name=mapper(value)\nprint(f\"Prediction is {format(move_name).capitalize()}.\")",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "model = keras.models.load_model('models/model1.h5')\n#Show user image to verify pet\nimage.show()\n#Parse image into array for machine learning purposes\nimage=img_to_array(image) \nimage=image/255.0\nprediction_image=np.array(image)\nprediction_image= np.expand_dims(image, axis=0)\n#Map number value back to breed name based on (reverse) mapping created in main.py\nreverse_mapping={  0:'basset_hound', 1:'beagle', 2:'russian_blue', 3:'pomeranian', 4:'ragdoll', ",
        "detail": "model",
        "documentation": {}
    }
]